#include <stdio.h> 
#include <stdlib.h> 
#include <Windows.h> 
#include <time.h> 
#include <process.h> 
#include <conio.h> 


#define LEFT 75 
#define RIGHT 77 
#define UP 72 
#define DOWN 80 
#define SPACE 32 // 시작 버튼 
#define ESC 27   // 종료버튼 
#define USER 2 
#define COM 3 


struct node {
	int x;
	int y;
	int cnt;
	struct node *link;
};


node *head = NULL, **phead = &head;
HANDLE hMutex = NULL;

int user_x, user_y, com_x, com_y;
int num = 0, level = 0;         // num : 유저와의 거리 
bool bstart = false, pw = true; // bstart : 스레드 제어   pw = 유저 이동 제어 및 종료 
int mapcpy[15][15] = { 0, };
int map[15][15] = {
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
  { 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
  { 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0 },
  { 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1 },
  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 },
  { 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
  { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
  { 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
  { 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 }
};

void Create_location();        // 위치 생성 
void draw_map();              // 맵 출력 
void Initialize();             // 맵 정리 
void Shortest_path_search();   // 최단거리 탐색 
void move();                   // 탐색한 거리 이동 
int condition_sub(int coordi);
int condition_add(int coordi);
void Control();

void gotoxy(int x, int y) { //gotoxy함수  
	COORD pos = { y * 2, x };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}
typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE;

void setcursortype(CURSOR_TYPE c) { //커서숨기는 함수  
	CONSOLE_CURSOR_INFO CurInfo;
	CurInfo.dwSize = 1;
	CurInfo.bVisible = FALSE;
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
}

unsigned _stdcall Thread(void *bThreadPW)
{
	bool &threadPW = *(bool *)bThreadPW;

	while (threadPW) {
		if (bstart == true) {
			WaitForSingleObject(hMutex, INFINITE);
			Initialize();
			Shortest_path_search();
			move();
			draw_map();
			ReleaseMutex(hMutex);
			Sleep(level);
		}

		else if (pw == false) {
			printf("your lose...");
			Sleep(1000);
		}

		else Sleep(100);
	}
	printf("쓰레드 종료\n");

	return 0;
}

void main()
{
	setcursortype(NOCURSOR);
	bool bThreadPW = true;
	HANDLE hthread = NULL;
	hMutex = CreateMutex(NULL, FALSE, NULL);
	srand(time(NULL));

	printf("컴퓨터 접근속도를 입력 (100이상): ");
	scanf("%d", &level);
	printf("\n\n스페이스를 누르면 시작합니다.");

	hthread = (HANDLE)_beginthreadex(NULL, 0, Thread, &bThreadPW, 0, NULL);
	Create_location();
	Control();
	Sleep(1000);
	printf("메인 종료\n");

	bThreadPW = false;
	WaitForSingleObject(hthread, INFINITE);
	WaitForSingleObject(hMutex, INFINITE);
	::CloseHandle(hthread);
	::CloseHandle(hMutex);
	hMutex = hthread = NULL;
}

void Create_location()
{
	while (true) { // 유저 랜덤 좌표  
	
		user_x = rand() % 15;
		user_y = rand() % 15;

		if (map[user_x][user_y] == 0) {
			map[user_x][user_y] = 2;
			break;
		}
	}

	while (true) { // 컴퓨터 좌표 -> 유저와 최소거리(10칸) 유지 생성 
	
		com_x = rand() % 15;
		com_y = rand() % 15;
		if (abs((com_x + com_y) - (user_x + user_y)) > 10 && map[com_x][com_y] == 0) {
			map[com_x][com_y] = 3;
			break;
		}
	}

	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) { mapcpy[i][j] = 100; }
	}
}

void draw_map()
{
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			if (map[i][j] != mapcpy[i][j]) {
				gotoxy(i, j);

				switch (map[i][j]) {
				case 1: printf("■"); break;
				case USER: printf("◎"); break;
				case COM: printf("●"); break;
				default: printf("□"); break;
				}
			}
		}
	}

	gotoxy(17, 0); printf("유저와의 거리 : %d블럭...", num - 2);

	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			mapcpy[i][j] = map[i][j];
		}
	}
}

void Initialize()
{
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) { 
			if (map[i][j] > 3) map[i][j] = 0;
		}
	}

	head = NULL;
}

void Shortest_path_search()
{
	bool end = true;
	node *temp = head;

	while (end) {
		if (head == NULL) {
			if (map[user_x + 1][user_y] == 0 && user_x + 1 < 15) {
				head = (node *)malloc(sizeof(node));
				head->x = user_x + 1;
				head->y = user_y;
				map[head->x][head->y] = head->cnt = 4;
				head->link = NULL;
			}

			if (head != NULL) temp = head;

			if (map[user_x][user_y + 1] == 0 && user_y + 1 < 15) {

				if (head == NULL) temp = head = (node *)malloc(sizeof(node));
				else temp = temp->link = (node *)malloc(sizeof(node));

				temp->x = user_x;
				temp->y = user_y + 1;
				map[temp->x][temp->y] = temp->cnt = 4;
				temp->link = NULL;
			}

			if (map[user_x - 1][user_y] == 0 && user_x - 1 >= 0) {

				if (head == NULL) temp = head = (node *)malloc(sizeof(node));
				else temp = temp->link = (node *)malloc(sizeof(node));

				temp->x = user_x - 1;
				temp->y = user_y;
				map[temp->x][temp->y] = temp->cnt = 4;
				temp->link = NULL;
			}
			if (map[user_x][user_y - 1] == 0 && user_y - 1 >= 0) {

				if (head == NULL) temp = head = (node *)malloc(sizeof(node));
				else temp = temp->link = (node *)malloc(sizeof(node));

				temp->x = user_x;
				temp->y = user_y - 1;
				map[temp->x][temp->y] = temp->cnt = 4;
				temp->link = NULL;
			}
		}

		else {
			if ((map[head->x + 1][head->y] == COM && head->x < 14) || (map[head->x - 1][head->y] == COM && head->x > 0) ||
				(map[head->x][head->y + 1] == COM && head->y < 14) || (map[head->x][head->y - 1] == COM && head->y > 0)) {
				num = head->cnt;
				end = false;
			}

			else {
				temp = head;
				while (temp->link != NULL) {
					temp = temp->link;
				}

				if (map[head->x + 1][head->y] == 0 && head->x + 1 < 15) {
					temp->link = (node *)malloc(sizeof(node));
					temp = temp->link;
					temp->x = head->x + 1;
					temp->y = head->y;
					map[temp->x][temp->y] = temp->cnt = head->cnt + 1;
					temp->link = NULL;
				}

				if (map[head->x][head->y + 1] == 0 && head->y + 1 < 15) {
					temp = temp->link = (node *)malloc(sizeof(node));
					temp->x = head->x;
					temp->y = head->y + 1;
					map[temp->x][temp->y] = temp->cnt = head->cnt + 1;
					temp->link = NULL;
				}

				if (map[head->x - 1][head->y] == 0 && head->x - 1 >= 0) {
					temp = temp->link = (node *)malloc(sizeof(node));
					temp->x = head->x - 1;
					temp->y = head->y;
					map[temp->x][temp->y] = temp->cnt = head->cnt + 1;
					temp->link = NULL;
				}

				if (map[head->x][head->y - 1] == 0 && head->y - 1 >= 0) {
					temp = temp->link = (node *)malloc(sizeof(node));
					temp->x = head->x;
					temp->y = head->y - 1;
					map[temp->x][temp->y] = temp->cnt = head->cnt + 1;
					temp->link = NULL;
				}

				if (head->link != NULL) *phead = head->link;
				else if (head->link == NULL) *phead = NULL;
			}
		}
	}
}

void move() // 컴퓨터 이동 함수 
{
	if (map[com_x + 1][com_y] == USER || map[com_x - 1][com_y] == USER ||
		map[com_x][com_y + 1] == USER || map[com_x][com_y - 1] == USER)   // 잡히게 되면... 
	{
		map[com_x][com_y] = 0;
		map[user_x][user_y] = COM;
		pw = bstart = false;
	}

	else {
		if (map[com_x + 1][com_y] == num) {
			map[com_x + 1][com_y] = map[com_x][com_y];
			map[com_x][com_y] = 0;
			com_x += 1;
		}

		else if (map[com_x - 1][com_y] == num) {
			map[com_x - 1][com_y] = map[com_x][com_y];
			map[com_x][com_y] = 0;
			com_x -= 1;
		}

		else if (map[com_x][com_y + 1] == num) {
			map[com_x][com_y + 1] = map[com_x][com_y];
			map[com_x][com_y] = 0;
			com_y += 1;
		}

		else if (map[com_x][com_y - 1] == num) {
			map[com_x][com_y - 1] = map[com_x][com_y];
			map[com_x][com_y] = 0;
			com_y -= 1;
		}

		num--;
	}
}

int condition_sub(int coordi)
{
	map[user_x][user_y] = 0;
	return coordi - 1;
}
int condition_add(int coordi)
{
	map[user_x][user_y] = 0;
	return coordi + 1;
}

void Control()
{
	int mov = 0;

	while (pw) {
		mov = getch();

		if (mov == 0xE0 || mov == 0) mov = getch();

		WaitForSingleObject(hMutex, INFINITE);

		switch (mov) {
		case LEFT:
			if (user_y > 0 && map[user_x][user_y - 1] != 1 && map[user_x][user_y - 1] != 3) {
				user_y = condition_sub(user_y);
				map[user_x][user_y] = 2;
			} break;
			
		case RIGHT:
			if (user_y < 14 && map[user_x][user_y + 1] != 1 && map[user_x][user_y + 1] != 3) {
				user_y = condition_add(user_y);
				map[user_x][user_y] = 2;
			} break;
			
		case UP:
			if (user_x > 0 && map[user_x - 1][user_y] != 1 && map[user_x - 1][user_y] != 3) {
				user_x = condition_sub(user_x);
				map[user_x][user_y] = 2;
			} break;
			
		case DOWN:
			if (user_x < 14 && map[user_x + 1][user_y] != 1 && map[user_x + 1][user_y] != 3) {
				user_x = condition_add(user_x);
				map[user_x][user_y] = 2;
			} break;
			
		case SPACE:
			if (bstart == false) {
				system("cls");
				bstart = true;
			} break;
			
		case ESC:
			system("cls");
			pw = false;
			bstart = false;
			break;
		}

		draw_map();
		ReleaseMutex(hMutex);
	}
}